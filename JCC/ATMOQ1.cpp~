        /*************
        Author - am10
             ******************/
#include<bits/stdc++.h>
 
#define sync ios::sync_with_stdio(false)
#define endl '\n'
#define ll long long
#define pb push_back
#define PI acos(-1)
#define pii pair <int,int>
#define FI first
#define SE second

/*
//D-S-U
int root(int v){return par[v] < 0 ? v : (par[v] = root(par[v]));}
void merge(int x,int y){	//	x and y are some tools (vertices)
        if((x = root(x)) == (y = root(y))     return ;
	if(par[y] < par[x])	// balancing the height of the tree      

//**********MODULAR EXPONENTIATION******************/
/*
int power(int x, unsigned int y, int p)
{
    int res = 1;      // Initialize result
 
    x = x % p;  // Update x if it is more than or 
                // equal to p
 
    while (y > 0)
    {
        // If y is odd, multiply x with result
        if (y & 1)
            res = (res*x) % p;
 
        // y must be even now
        y = y>>1; // y = y/2
        x = (x*x) % p;  
    }
    return res;
}
*/
using namespace std;
int arr[27];
int pre[27];
int main()
{
  sync;
  int t;
  cin >> t;
  while(t--)
  {
    string s;
    cin >> s;
    for(int i=0;i<s.length();i++)
    {
      arr[s[i]-'a']++;
    }
    int n,k;
    cin >> n >> k;
    int flag = 0;
    for(int i=0;i<n;i++)
    {
     
      string t;
      cin >> t;
      int cnt=0;
      for(int j=0;j<t.length();j++)
      {
        if(pre[t[j]-'a']==0 && arr[t[j]-'a']!=0)
          cnt++,pre[t[j]-'a']++;
      }
      if(cnt == k)
      {
        if(flag == 0)
        {
          cout <<"Yes" << endl;
          flag = 1;
        }
        cout << t << endl;
      }
      memset(pre,0,sizeof(pre));
    }
    memset(arr,0,sizeof(arr));
    if(flag==0)
      cout << "No" << endl;
  }
}
